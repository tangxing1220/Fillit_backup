#include <ctype.h>
#include <fcntl.h>
#include <stdio.h>
#include <string.h>
#include <strings.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <sys/uio.h>
#include <time.h>
#include <unistd.h>
#include "libft.h"
#include "square.h"
#include "points.h"
#include "read.h"
#include "tetrimino.h"
#include "solve.h"

void		free_tetrimino(t_tetri **tetri);
int			validate_block(const char *shape, int len, int *sides);
void		fill_tetrimino(const char *raw_shape, const char fill, t_tetri *new);
char		**create_tetrimno_shape(int height, int width);

t_point     *create_point_fromxy(int x, int y)
{
    t_point *point;
    point = (t_point *)ft_memalloc(sizeof(*point));
    if (point)
    {
        point->x = x;
        point->y = y;
        return (point);
    }
    return (NULL);
}

int		xy_to_len(int x, int y)
{
	return (x + y * 5);
}

void	print_tetrimno(t_tetri *tetri)
{
	int y;

	y = 0;
	while (y < tetri->height)
	{
		ft_putstr(tetri->shape[y++]);
		ft_putchar('\n');
	}
}

void	print_tetri_lst(t_list *node)
{
	print_tetrimno((t_tetri *)node->content);
	ft_putchar('\n');
}

char *g_rshape_v1 = ".#..\n.#..\n.#..\n.#..\n";
char *g_rshape_i1 = ".#..\n.#..\n.#..\n...#\n";

char *g_rshape_v2 = ".##.\n..##\n....\n....\n";
char *g_rshape_i2 = ".#.#\n..##\n....\n....\n";
char *g_rshape_i3 = "..#.\n.#..\n.#..\n..#.\n";
char *g_rshape_i4 = "....\n.#..\n.#..\n.#..\n";
char *g_rshape_i5 = "..A.\n..A.\n..A.\n..A.\n";
char *g_rshape_i6 = "....\n....\n....\n....\n";
char *g_rshape_i7 = ".#..\n.#..\n..#.\n..#.\n";
char *g_rshape_i8 = ".##.\n....\n.##.\n....\n";

char *g_rshape_v3 = "##..\n##..\n....\n....\n";
char *g_rshape_v4 = "...#\n...#\n...#\n...#\n";
char *g_rshape_v5 = "....\n....\n....\n####\n";
char *g_rshape_v6 = "....\n..##\n.##.\n....\n";
char *g_rshape_v7 = "#...\n##..\n#...\n....\n";

#test invalid_map
	printf("CHECKING FOR INVALID MAP INPUT...\n");

	struct stat st;
	int bytes_written;
	FILE *fp;
	char *str;
	char *invalidfiles[] = {
		"test_input/invalid_maps/5x5",
		"test_input/invalid_maps/30tetriminoes",
		"test_input/invalid_maps/nonewlineatend",
		"test_input/invalid_maps/nopermissions",
		"test_input/invalid_maps/startswithnewline",
		"test_input/invalid_maps/stucktogether",
		"test_input/invalid_maps/toomanynewlines",
		NULL};

	bytes_written = 0;
	fp = freopen("./tests/redir.txt", "w+", stdout);
	int i = 0;
	while (invalidfiles[i])
	{
		//get_tetriminoes_from_file(invalidfiles[i]);
		i++;
	}
	stat("./tests/redir.txt", &st);
	bytes_written = st.st_size;
	//ck_assert_int_eq(bytes_written, strlen(sentence));
	str = (char *)malloc(sizeof(char) * bytes_written + 1);
	rewind(fp);
	fscanf(fp, "%s", str);
	//ck_assert_str_eq(str, sentence);
	fclose(fp);
	free(str);

	remove("./tests/redir.txt");

#test 	check_xy_to_len
	printf("CHECKING XY TO LEN...\n");

	ck_assert_int_eq(5, xy_to_len(0, 1));

#test	check_create_point
	printf("CHECKING CREATE POINT...\n");

	t_point	*point;

	point = create_point(0);
	ck_assert_int_eq(0, point->x);
	ck_assert_int_eq(0, point->y);
	point->x = 10;
	ck_assert_int_eq(10, point->x);
	free_point(&point);
	ck_assert_ptr_eq(0, point);

	point = create_point(6);
	ck_assert_int_eq(1, point->x);
	ck_assert_int_eq(1, point->y);
	free_point(&point);
	ck_assert_ptr_eq(0, point);

	point = create_point(1);
	ck_assert_int_eq(1, point->x);
	ck_assert_int_eq(0, point->y);
	ck_assert_int_eq(1, xy_to_len(point->x, point->y));
	ck_assert_int_eq(g_rshape_v1[1], g_rshape_v1[xy_to_len(point->x, point->y)]);
	free_point(&point);
	ck_assert_ptr_eq(0, point);

	point = create_point(5);
	ck_assert_int_eq(0, point->x);
	ck_assert_int_eq(1, point->y);
	free_point(&point);
	ck_assert_ptr_eq(0, point);

#test check_free_point
	printf("CHECKING FREE POINT...\n");

	t_point	*point;

	point = create_point(0);
	free_point(&point);
	ck_assert_ptr_eq(0, point);

#test check_free_minmax_points
	printf("CHECKING MINMAX FREE POINTS...\n");

	t_point	**points;

	points = (t_point **)ft_memalloc(sizeof(*points) * 2);
	points[0] = create_point(0);
	points[1] = create_point(3);
	ck_assert_ptr_ne(0, points);
	free_minmax_points(&points);
	//ck_assert_ptr_eq(0, points[0]);
	//ck_assert_ptr_eq(0, points[1]);
	ck_assert_ptr_eq(0, points);

#test check_validate_block
	/*
	printf("CHECKING VALIDATE BLOCK...\n");

	//char *g_rshape_v1 = ".#..\n.#..\n.#..\n.#..\n";
	//char *g_rshape_i1 = ".#..\n.#..\n.#..\n...#\n";

	//char *g_rshape_v2 = ".##.\n..##\n....\n....\n";
	//char *g_rshape_i2 = ".#.#\n..##\n....\n....\n";

	//char *g_rshape_v3 = "##..\n##..\n....\n....\n";

	//char *g_rshape_i3 = "..#.\n.#..\n.#..\n..#.\n";

	int count = 0;
	int sides = 0;
	int bl_v1[4] = {1, 6, 11, 16};
	int bl_i1[4] = {1, 6, 11, 18};
	int bl_v2[4] = {1, 2, 7, 8};
	int bl_i2[4] = {1, 3, 7, 8};
	int bl_v3[4] = {0, 1, 5, 6};
	int bl_i3[4] = {2, 6, 11, 17};

	while(count < 4)
		ck_assert_int_eq(1, validate_block(g_rshape_v1, bl_v1[count++], &sides));
	count = 0;
	while(count < 3)
		ck_assert_int_eq(1, validate_block(g_rshape_i1, bl_i1[count++], &sides));
	ck_assert_int_eq(0, validate_block(g_rshape_i1, bl_i1[count], &sides));

	count = 0;
	while(count < 4)
		ck_assert_int_eq(1, validate_block(g_rshape_v2, bl_v2[count++], &sides));
	count = 0;
	ck_assert_int_eq(0, validate_block(g_rshape_i2, bl_i2[count++], &sides));
	while (count < 4)
		ck_assert_int_eq(1, validate_block(g_rshape_i2, bl_i2[count++], &sides));

	count = 0;
	while(count < 4)
		ck_assert_int_eq(1, validate_block(g_rshape_v3, bl_v3[count++], &sides));

	count = 0;
	ck_assert_int_eq(0, validate_block(g_rshape_i3, bl_i3[count++], &sides));
	ck_assert_int_eq(1, validate_block(g_rshape_i3, bl_i3[count++], &sides));
	ck_assert_int_eq(1, validate_block(g_rshape_i3, bl_i3[count++], &sides));
	ck_assert_int_eq(0, validate_block(g_rshape_i3, bl_i3[count++], &sides));
	*/

#test check_validate_tetrimino
	printf("CHECKING VALIDATE TETRIMINO...\n");

	//char *g_rshape_v1 = ".#..\n.#..\n.#..\n.#..\n";
	//char *g_rshape_i1 = ".#..\n.#..\n.#..\n...#\n";

	//char *g_rshape_v2 = ".##.\n..##\n....\n....\n";
	//char *g_rshape_i2 = ".#.#\n..##\n....\n....\n";

	//char *g_rshape_v3 = "##..\n##..\n....\n....\n";

	//char *g_rshape_i3 = "..#.\n.#..\n.#..\n..#.\n";

	t_point **points;

	points = (t_point **)ft_memalloc(sizeof(*points) * 2);
	ck_assert_int_eq(1, validate_tetrimino(g_rshape_v1, &points));
	ck_assert_int_eq(1, xy_to_len(points[0]->x, points[0]->y));
	ck_assert_int_eq(16, xy_to_len(points[1]->x, points[1]->y));
	ck_assert_int_eq(1, points[0]->x);
	ck_assert_int_eq(0, points[0]->y);
	ck_assert_int_eq(1, points[1]->x);
	ck_assert_int_eq(3, points[1]->y);
	free_minmax_points(&points);
	ck_assert_ptr_eq(0, points);

	points = (t_point **)ft_memalloc(sizeof(*points) * 2);
	ck_assert_int_eq(1, validate_tetrimino(g_rshape_v2, &points));
	ck_assert_int_eq(1, xy_to_len(points[0]->x, points[0]->y));
	ck_assert_int_eq(8, xy_to_len(points[1]->x, points[1]->y));
	ck_assert_int_eq(1, points[0]->x);
	ck_assert_int_eq(0, points[0]->y);
	ck_assert_int_eq(3, points[1]->x);
	ck_assert_int_eq(1, points[1]->y);
	free_minmax_points(&points);
	ck_assert_ptr_eq(0, points);

	points = (t_point **)ft_memalloc(sizeof(*points) * 2);
	ck_assert_int_eq(1, validate_tetrimino(g_rshape_v3, &points));
	ck_assert_int_eq(0, points[0]->x);
	ck_assert_int_eq(0, points[0]->y);
	ck_assert_int_eq(1, points[1]->x);
	ck_assert_int_eq(1, points[1]->y);
	ck_assert_int_eq(0, xy_to_len(points[0]->x, points[0]->y));
	ck_assert_int_eq(6, xy_to_len(points[1]->x, points[1]->y));
	free_minmax_points(&points);
	ck_assert_ptr_eq(0, points);

	points = (t_point **)ft_memalloc(sizeof(*points) * 2);
	ck_assert_int_eq(0, validate_tetrimino(g_rshape_i1, &points));
	ck_assert_ptr_eq(points, 0);

	points = (t_point **)ft_memalloc(sizeof(*points) * 2);
	ck_assert_int_eq(0, validate_tetrimino(g_rshape_i2, &points));
	ck_assert_ptr_eq(0, points);

	points = (t_point **)ft_memalloc(sizeof(*points) * 2);
	ck_assert_int_eq(0, validate_tetrimino(g_rshape_i3, &points));
	ck_assert_ptr_eq(0, points);

	points = (t_point **)ft_memalloc(sizeof(*points) * 2);
	ck_assert_int_eq(0, validate_tetrimino(g_rshape_i4, &points));
	ck_assert_ptr_eq(0, points);

	points = (t_point **)ft_memalloc(sizeof(*points) * 2);
	ck_assert_int_eq(0, validate_tetrimino(g_rshape_i5, &points));
	ck_assert_ptr_eq(0, points);

	points = (t_point **)ft_memalloc(sizeof(*points) * 2);
	ck_assert_int_eq(0, validate_tetrimino(g_rshape_i6, &points));
	ck_assert_ptr_eq(0, points);

	points = (t_point **)ft_memalloc(sizeof(*points) * 2);
	ck_assert_int_eq(0, validate_tetrimino(g_rshape_i7, &points));
	ck_assert_ptr_eq(0, points);

	points = (t_point **)ft_memalloc(sizeof(*points) * 2);
	ck_assert_int_eq(0, validate_tetrimino(g_rshape_i8, &points));
	ck_assert_ptr_eq(0, points);

#test check_create_tetrimno_shape
	printf("CHECKING CREATE TETRIMNO SHAPE...\n");

	int row;
	char *empty_2_2[] = {"..", ".."};
	char *empty_4_1[] = {".", ".", ".", "."};
	char **res;

	row = 0;
	res = create_tetrimno_shape(2, 2);
	ck_assert_str_eq(empty_2_2[0], res[0]);
	ck_assert_str_eq(empty_2_2[1], res[1]);
	ck_assert_int_eq(2, strlen(res[0]));
	ck_assert_int_eq(2, strlen(res[1]));
	ck_assert_ptr_eq(res[2], NULL);

	row = 0;
	res = create_tetrimno_shape(4, 1);
	ck_assert_str_eq(empty_4_1[0], res[0]);
	ck_assert_str_eq(empty_4_1[1], res[1]);
	ck_assert_str_eq(empty_4_1[2], res[2]);
	ck_assert_str_eq(empty_4_1[3], res[3]);
	ck_assert_int_eq(1, strlen(res[0]));
	ck_assert_int_eq(1, strlen(res[1]));
	ck_assert_int_eq(1, strlen(res[2]));
	ck_assert_int_eq(1, strlen(res[3]));
	ck_assert_ptr_eq(res[4], NULL);

#test check_fill_tetrimno
	/*
	printf("CHECKING FILL TETRIMNO...\n");

	t_point *point;
	t_tetri *new;

	//char *g_rshape_v5 = "....\n....\n....\n####\n";

	point = create_point(0);
	new = (t_tetri *)ft_memalloc(sizeof(*new));
	new->width = 2;
	new->height = 2;
	new->start = point;
	new->shape = create_tetrimno_shape(new->width, new->height);
	fill_tetrimino(g_rshape_v3, 'A', new);
	ck_assert_str_eq(new->shape[0], "AA");
	ck_assert_str_eq(new->shape[1], "AA");
	ck_assert_ptr_eq(new->shape[2], 0);
	free_tetrimino(&new);
	ck_assert_ptr_eq(new, 0);

	point = create_point(1);
	new = (t_tetri *)ft_memalloc(sizeof(*new));
	new->width = 1;
	new->height = 4;
	new->start = point;
	new->shape = create_tetrimno_shape(new->height, new->width);
	fill_tetrimino(g_rshape_v1, 'A', new);
	ck_assert_str_eq(new->shape[0], "A");
	ck_assert_str_eq(new->shape[1], "A");
	ck_assert_str_eq(new->shape[2], "A");
	ck_assert_str_eq(new->shape[3], "A");
	ck_assert_ptr_eq(new->shape[4], 0);
	free_tetrimino(&new);
	ck_assert_ptr_eq(new, 0);

	point = create_point(xy_to_len(0, 3));
	new = (t_tetri *)ft_memalloc(sizeof(*new));
	new->width = 4;
	new->height = 1;
	new->start = point;
	new->shape = create_tetrimno_shape(new->height, new->width);
	fill_tetrimino(g_rshape_v5, 'E', new);
	ck_assert_int_eq(0, new->start->x);
	ck_assert_int_eq(3, new->start->y);
	ck_assert_str_eq(new->shape[0], "EEEE");
	ck_assert_ptr_eq(new->shape[1], 0);
	free_tetrimino(&new);
	ck_assert_ptr_eq(new, 0);
	*/

#test check_create_tetrimino
	printf("CHECKING CREATE TETRIMINO...\n");

	//char *g_rshape_v2 = ".##.\n..##\n....\n....\n";
	//char *g_rshape_v4 = "...#\n...#\n...#\n...#\n";
	//char *g_rshape_v6 = "....\n..##\n.##.\n....\n";

	t_tetri *new;

	new = create_tetrimino(g_rshape_v3, 'A');
	ck_assert_int_eq(2, new->width);
	ck_assert_int_eq(2, new->height);
	ck_assert_int_eq(0, new->start->x);
	ck_assert_int_eq(0, new->start->y);
	ck_assert_str_eq(new->shape[0], "AA");
	ck_assert_str_eq(new->shape[1], "AA");
	ck_assert_ptr_eq(new->shape[2], 0);
	free_tetrimino(&new);
	ck_assert_ptr_eq(new, 0);

	new = create_tetrimino(g_rshape_v1, 'B');
	ck_assert_int_eq(1, new->width);
	ck_assert_int_eq(4, new->height);
	ck_assert_int_eq(1, new->start->x);
	ck_assert_int_eq(0, new->start->y);
	ck_assert_str_eq(new->shape[0], "B");
	ck_assert_str_eq(new->shape[1], "B");
	ck_assert_str_eq(new->shape[2], "B");
	ck_assert_str_eq(new->shape[3], "B");
	ck_assert_ptr_eq(new->shape[4], 0);
	free_tetrimino(&new);
	ck_assert_ptr_eq(new, 0);

	new = create_tetrimino(g_rshape_v2, 'C');
	ck_assert_int_eq(3, new->width);
	ck_assert_int_eq(2, new->height);
	ck_assert_int_eq(1, new->start->x);
	ck_assert_int_eq(0, new->start->y);
	ck_assert_str_eq(new->shape[0], "CC.");
	ck_assert_str_eq(new->shape[1], ".CC");
	ck_assert_ptr_eq(new->shape[2], 0);
	free_tetrimino(&new);
	ck_assert_ptr_eq(new, 0);

	new = create_tetrimino(g_rshape_v4, 'D');
	ck_assert_int_eq(1, new->width);
	ck_assert_int_eq(4, new->height);
	ck_assert_int_eq(3, new->start->x);
	ck_assert_int_eq(0, new->start->y);
	ck_assert_str_eq(new->shape[0], "D");
	ck_assert_str_eq(new->shape[1], "D");
	ck_assert_str_eq(new->shape[2], "D");
	ck_assert_str_eq(new->shape[3], "D");
	ck_assert_ptr_eq(new->shape[4], 0);
	free_tetrimino(&new);
	ck_assert_ptr_eq(new, 0);

	new = create_tetrimino(g_rshape_v5, 'E');
	ck_assert_int_eq(4, new->width);
	ck_assert_int_eq(1, new->height);
	ck_assert_int_eq(0, new->start->x);
	ck_assert_int_eq(3, new->start->y);
	ck_assert_str_eq(new->shape[0], "EEEE");
	ck_assert_ptr_eq(new->shape[1], 0);
	free_tetrimino(&new);
	ck_assert_ptr_eq(new, 0);

	new = create_tetrimino(g_rshape_v6, 'F');
	ck_assert_int_eq(2, new->height);
	ck_assert_int_eq(3, new->width);
	ck_assert_int_eq(1, new->start->x);
	ck_assert_int_eq(1, new->start->y);
	ck_assert_str_eq(new->shape[0], ".FF");
	ck_assert_str_eq(new->shape[1], "FF.");
	ck_assert_ptr_eq(new->shape[2], 0);
	free_tetrimino(&new);
	ck_assert_ptr_eq(new, 0);

	new = create_tetrimino(g_rshape_v7, 'G');
	ck_assert_int_eq(3, new->height);
	ck_assert_int_eq(2, new->width);
	ck_assert_int_eq(0, new->start->x);
	ck_assert_int_eq(0, new->start->y);
	ck_assert_str_eq(new->shape[0], "G.");
	ck_assert_str_eq(new->shape[1], "GG");
	ck_assert_str_eq(new->shape[2], "G.");
	ck_assert_ptr_eq(new->shape[3], 0);
	free_tetrimino(&new);
	ck_assert_ptr_eq(new, 0);

#test check_create_square
    printf("CHECKING MAKE SQUARE STRUCT...\n");

	t_square *new = create_square(10);
    char answer[11][11] = { "..........",
                            "..........",
                            "..........",
                            "..........",
                            "..........",
                            "..........",
                            "..........",
                            "..........",
                            "..........",
                            "..........",
                            {0} };

    int i = 0;
    while (i < 10)
    {
        ck_assert_str_eq((new->rows)[i], answer[i]);
        i++;
    }
    ck_assert_ptr_eq(new->rows[i], NULL);
	ck_assert_int_eq((int)(new->size),10);

#test check_free_square
	printf("CHECKING FREE SQUARE..\n");

	t_square *square;

	square = create_square(10);
	ck_assert_int_eq(10, square->size);
	free_square(&square);
	//for (int i = 0; i < 9; i++)
	//	ck_assert_ptr_eq(0, square->rows[i]);
	//ck_assert_ptr_eq(0, square->rows);
	ck_assert_ptr_eq(0, square);

#test check_lstnew_tetri
	printf("CHECKING LSTNEW TETRI...\n");

	t_list *node;
	t_tetri *new;

	node = lstnew_tetri(g_rshape_v4, 'D');
	new = (t_tetri *)node->content;
	ck_assert_int_eq(1, new->width);
	ck_assert_int_eq(4, new->height);
	ck_assert_int_eq(3, new->start->x);
	ck_assert_int_eq(0, new->start->y);
	ck_assert_str_eq(new->shape[0], "D");
	ck_assert_str_eq(new->shape[1], "D");
	ck_assert_str_eq(new->shape[2], "D");
	ck_assert_str_eq(new->shape[3], "D");
	ck_assert_ptr_eq(new->shape[4], 0);
	free_tetrimino(&new);
	ck_assert_ptr_eq(new, 0);

#test	check_read_tetris
	printf("CHECKING READ TETRIS...\n");

	int fd;
	char *tetri_str;
	t_list *tail;
	t_list *head;

	fd = open("./test_input/valid_maps/basic_input", O_RDONLY);
	tetri_str = ft_strnew(TETRI_SIZE + 1);

	read(fd, tetri_str, TETRI_SIZE + 1);
	tetri_str[TETRI_SIZE] = '\0';
	ck_assert_str_eq(tetri_str, g_rshape_v4);
	head = lstnew_tetri(tetri_str, 'A');
	tail = head;
	ft_bzero(tetri_str, TETRI_SIZE + 1);

	read(fd, tetri_str, TETRI_SIZE + 1);
	tetri_str[TETRI_SIZE] = '\0';
	tail->next = lstnew_tetri(tetri_str, 'A' + 1);
	tail = tail->next;

#test check_get_tetri_from_file
	printf("CHECKING GET TETRIS FROM FILE...\n");

	//t_list *tetri_lst;

	//tetri_lst = get_tetriminoes_from_file("./test_input/valid_maps/basic_input");
	//tetri_lst = get_tetriminoes_from_file("./test_input/valid_maps/allshapes");
	//print_tetrimno((t_tetri *)tetri_lst->content);
	//ft_lstiter(tetri_lst, &print_tetri_lst);

#test check_place_tetri
	printf("CHECKING PLACE TETRIS...\n");

	t_square	*square;
	t_list		*tetri_lst;
	t_point		*point;

	point = create_point(6);
	tetri_lst = get_tetriminoes_from_file("./test_input/valid_maps/basic_input");
	square = create_square(10);
	//ft_putstrarr(place_a_tetrimino((t_tetri *)tetri_lst->content,
	//				square, point));

#test check_get_next_point
	printf("CHECKING GET NEXT POINT...\n");

	t_point		*point;
	t_square	*square;

	point = create_point(0);
	square = create_square(3);
	square->rows[0][0]  = 'A';
	square->rows[1][0]  = 'A';
	square->rows[2][0]  = 'A';
	square->rows[2][1]  = 'A';

	square->rows[0][1]  = 'B';
	square->rows[0][2]  = 'B';
	square->rows[1][2]  = 'B';
	square->rows[2][2]  = 'B';

	ck_assert_int_eq(0, point->x);
	ck_assert_int_eq(0, point->y);
	ck_assert_int_eq(1, get_next_point(&point, square->rows));
	ck_assert_int_eq(1, point->x);
	ck_assert_int_eq(1, point->y);
	ck_assert_int_eq(get_next_point(&point, square->rows), 0);
	free_point(&point);
	free_square(&square);

	//ck_assert_int_eq(get_next_point(NULL, NULL), 0);
	//ck_assert_int_eq(get_next_point(&point, square->rows), 1);
	//ck_assert_int_eq(0, point->x);
	//ck_assert_int_eq(0, point->y);

#test check_solve_a_square
	printf("CHECKING SOLVE A SQUARE...\n");

	printf("\n\n****ERROR MAPS ****\n\n");

	printf("\n**5x5**\n");
	solve("./test_input/invalid_maps/5x5");

	printf("\n**30 TETRIMINOES**\n");
	solve("./test_input/invalid_maps/30tetriminoes");

	printf("\n**NO NEWLINE AT END**\n");
	solve("./test_input/invalid_maps/nonewlineatend");

	printf("\n**STARTS WITH NEWLINE**\n");
	solve("./test_input/invalid_maps/startswithnewline");

	printf("\n**STUCK TOGETHER**\n");
	solve("./test_input/invalid_maps/stucktogether");

	printf("\n**CHECKER ERROR 0**\n");
	solve("./test_input/invalid_maps/checker_errorfile0");

	printf("\n**CHECKER ERROR 1**\n");
	solve("./test_input/invalid_maps/checker_errorfile1");

	printf("\n\n****VALID MAPS ****\n\n");

	printf("\n**MANAGE OVERLAP**\n");
	solve("./test_input/valid_maps/manage_overlap");

	printf("\n**BASIC INPUT**\n");
	solve("./test_input/valid_maps/basic_input");

	printf("\n**PG10 EXAMPLE**\n");
	solve("./test_input/valid_maps/pg10_example");

	printf("\n**PG11 EXAMPLE**\n");
	solve("./test_input/valid_maps/pg11_example");

	printf("\n**STICK TETRI**\n");
	solve("./test_input/valid_maps/stick_tetri");

	printf("\n**INVALID MAPS 1**\n");
	solve("./test_input/invalid_maps/invalid_shape_1");

